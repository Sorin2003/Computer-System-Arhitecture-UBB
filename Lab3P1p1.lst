     1                                  bits 32 ; assembling for the 32 bits architecture
     2                                  
     3                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     4                                  global start        
     5                                  
     6                                  ; declare external functions needed by our program
     7                                  extern exit               ; tell nasm that exit exists even if we won't be defining it
     8                                  import exit msvcrt.dll    ; exit is a function that ends the calling process. It is defined in msvcrt.dll
     9                                                            ; msvcrt.dll contains exit, printf and all the other important C-runtime specific functions
    10                                  
    11                                  ; our data is declared here (the variables needed by our program)
    12                                  segment data use32 class=data
    13                                      ; ...
    14 00000000 11                          a db 17
    15 00000001 5F00                        b dw 95
    16 00000003 6E000000                    c dd 110
    17 00000007 C507000000000000            d dq 1989
    18                                  ; our code starts here
    19                                  segment code use32 class=code
    20                                      start:
    21                                          ; a+b-c+(d-a) a - byte, b - word, c - double word, d - qword - Unsigned representation
    22 00000000 31C0                        xor eax, eax       ;eax=0
    23 00000002 A0[00000000]                mov al, byte[a]    ;al=a
    24 00000007 660305[01000000]            add ax, word[b]    ;ax=a+b
    25 0000000E 2B05[03000000]              sub eax, dword[c]  ;eax=a+b-c
    26 00000014 31D2                        xor edx, edx       ;edx=0
    27 00000016 89C3                        mov ebx, eax       ;ebx=a+b-c
    28 00000018 31C0                        xor eax,eax        ;eax=0
    29 0000001A A1[07000000]                mov eax,dword[d+0] 
    30 0000001F 8B15[0B000000]              mov edx,dword[d+4] ;edx:eax = d
    31 00000025 2A05[00000000]              sub al,byte[a]    ;edx:eax = d-a
    32 0000002B 01D8                        add eax,ebx        ;edx;eax = a+c-c+(d-a)
    33                                          ; exit(0)
    34 0000002D 6A00                            push    dword 0      ; push the parameter for exit onto the stack
    35 0000002F FF15[00000000]                  call    [exit]       ; call exit to terminate the program
