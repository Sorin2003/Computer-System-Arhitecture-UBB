     1                                  bits 32 ; assembling for the 32 bits architecture
     2                                  
     3                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     4                                  global start        
     5                                  
     6                                  ; declare external functions needed by our program
     7                                  extern exit               ; tell nasm that exit exists even if we won't be defining it
     8                                  import exit msvcrt.dll    ; exit is a function that ends the calling process. It is defined in msvcrt.dll
     9                                                            ; msvcrt.dll contains exit, printf and all the other important C-runtime specific functions
    10                                  
    11                                  ; our data is declared here (the variables needed by our program)
    12                                  segment data use32 class=data
    13                                      ; ...
    14 00000000 06                          a db 6
    15 00000001 05                          b db 5
    16 00000002 04                          c db 4
    17 00000003 0200                        d dw 2
    18                                  
    19                                  ; our code starts here
    20                                  segment code use32 class=code
    21                                      start:
    22                                          ; ...
    23 00000000 A0[00000000]                mov al, byte[a] ;byte a in al
    24 00000005 B402                        mov ah, 2       ;2 in ah
    25 00000007 F6E4                        mul ah          ;multiply al(a) with ah(2) -> ax   (a*2)
    26 00000009 88C3                        mov bl, al      ;a*2 converted to byte from word in bl (unsigned) bl = (a*2)
    27 0000000B A0[01000000]                mov al, byte[b] ;byte b in al
    28 00000010 2C03                        sub al, 3       ;substract 3 from al(b) al =(b-3)
    29 00000012 B402                        mov ah, 2       ;2 in ah
    30 00000014 F6E4                        mul ah          ;al 2*(b-3) -> ax = (b-3)*2
    31 00000016 00C3                        add bl, al      ;add al (byte converted from ax) to bl (unsigned) bl = (a*2)+(b-3)*2 
    32 00000018 66B80000                    mov ax, 0       ;0 in ax so i can convert from byte to word ax = 0
    33 0000001C 00D8                        add al, bl      ;add bl to al (ax) ax=(a*2)+(b-3)*2 
    34 0000001E 662B05[03000000]            sub ax, word[d] ;substract the word d from ax  ax = (a*2)+(b-3)*2-d
    35 00000025 6689C3                      mov bx, ax      ;move ax in bx
    36 00000028 A0[02000000]                mov al, byte[c] ;move c to al
    37 0000002D B402                        mov ah, 2       ;move 2 to ah
    38 0000002F F6E4                        mul ah          ;ah*al  2*c -> ax
    39 00000031 6629C3                      sub bx, ax      ;the final substraction ax = (a*2)+(b-3)*2-d-2*c
    40                                      
    41                                      
    42                                      
    43                                      
    44                                          ; exit(0)
    45 00000034 6A00                            push    dword 0      ; push the parameter for exit onto the stack
    46 00000036 FF15[00000000]                  call    [exit]       ; call exit to terminate the program
