     1                                  bits 32 ; assembling for the 32 bits architecture
     2                                  
     3                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     4                                  global start        
     5                                  
     6                                  ; declare external functions needed by our program
     7                                  extern exit               ; tell nasm that exit exists even if we won't be defining it
     8                                  import exit msvcrt.dll    ; exit is a function that ends the calling process. It is defined in msvcrt.dll
     9                                                            ; msvcrt.dll contains exit, printf and all the other important C-runtime specific functions
    10                                  
    11                                  ; our data is declared here (the variables needed by our program)
    12                                  segment data use32 class=data
    13                                      ; a - byte, b - word, c - double word, d - qword - Signed representation
    14 00000000 1F                          a db 31
    15 00000001 0C00                        b dw 12
    16 00000003 59010000                    c dd 345
    17 00000007 C507000000000000            d dq 1989
    18                                  ; our code starts here
    19                                  segment code use32 class=code
    20                                      start:
    21                                          ; c+a+b+b+a
    22 00000000 8B1D[03000000]              mov ebx, dword[c] ;ebx = c
    23 00000006 31C0                        xor eax, eax      ;eax=0
    24 00000008 A0[00000000]                mov al,byte[a]    ;al = a
    25 0000000D 6698                        cbw               ;al->ax
    26 0000000F 98                          cwde              ;ax->eax
    27 00000010 01D8                        add eax,ebx       ;eax = c+a
    28 00000012 89C3                        mov ebx,eax       ;ebx = c+a
    29 00000014 31C0                        xor eax,eax       ;eax = 0
    30 00000016 66A1[01000000]              mov ax, word[b]   ;ax = b
    31 0000001C 98                          cwde              ;ax -> eax
    32 0000001D 01C3                        add ebx,eax       ;ebx = c+a+b
    33 0000001F 01C3                        add ebx,eax       ;ebx = c+a+b+b
    34 00000021 31C0                        xor eax, eax      ;eax=0
    35 00000023 A0[00000000]                mov al,byte[a]    ;al = a
    36 00000028 6698                        cbw               ;al->ax
    37 0000002A 98                          cwde              ;ax->eax
    38 0000002B 01C3                        add ebx,eax       ;ebx = c+a+b+b+a
    39                                      
    40                                      
    41                                      
    42                                          ; exit(0)
    43 0000002D 6A00                            push    dword 0      ; push the parameter for exit onto the stack
    44 0000002F FF15[00000000]                  call    [exit]       ; call exit to terminate the program
