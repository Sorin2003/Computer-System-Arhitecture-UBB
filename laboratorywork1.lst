     1                                  bits 32 ; assembling for the 32 bits architecture
     2                                  
     3                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     4                                  global start        
     5                                  
     6                                  ; declare external functions needed by our program
     7                                  extern exit               ; tell nasm that exit exists even if we won't be defining it
     8                                  import exit msvcrt.dll    ; exit is a function that ends the calling process. It is defined in msvcrt.dll
     9                                                            ; msvcrt.dll contains exit, printf and all the other important C-runtime specific functions
    10                                  extern fopen
    11                                  import fopen msvcrt.dll
    12                                  extern printf
    13                                  import printf msvcrt.dll
    14                                  extern fscanf
    15                                  import fscanf msvcrt.dll
    16                                  extern fclose 
    17                                  import fclose msvcrt.dll
    18                                  extern fprintf
    19                                  import fprintf msvcrt.dll
    20                                  
    21                                  ; our data is declared here (the variables needed by our program)
    22                                  segment data use32 class=data
    23                                      ; ...
    24 00000000 00000000                a dd 0
    25 00000004 00000000                f dd 0
    26 00000008 00000000                g dd 0
    27 0000000C 612E74787400            filein db "a.txt",0
    28 00000012 622E74787400            fileout db "b.txt", 0
    29 00000018 256400                  format db "%d", 0
    30 0000001B 7200                    moder db "r",0
    31 0000001D 6D00                    modem db "m", 0
    32                                  ; our code starts here
    33                                  segment code use32 class=code
    34                                      start:
    35                                          ; ...
    36                                          ;FILE * fopen(name, mode)
    37                                          ;int fprint (FILE*  id, char*format,...)
    38                                          ;int fscanf (FILE* ids, char*format,...)
    39                                          ;int fread (void*res, int size, int count, FILE*id)
    40 00000000 68[1B000000]                    push moder
    41 00000005 68[0C000000]                    push filein
    42 0000000A FF15[00000000]                  call [fopen]
    43 00000010 83C408                          add esp, 4*2
    44 00000013 A3[04000000]                    mov dword [f], eax
    45 00000018 68[1D000000]                    push modem
    46 0000001D 68[12000000]                    push fileout
    47 00000022 FF15[00000000]                  call [fopen]
    48 00000028 83C408                          add esp, 4*2
    49 0000002B A3[08000000]                    mov dword [g], eax
    50 00000030 68[00000000]                    push dword a
    51 00000035 68[18000000]                    push format
    52 0000003A FF35[04000000]                  push dword [f]
    53 00000040 FF15[00000000]                  call [fscanf]
    54 00000046 83C40C                          add esp, 4*3
    55 00000049 FF35[00000000]                  push dword [a]
    56 0000004F 68[18000000]                    push format
    57 00000054 FF35[08000000]                  push dword [g]
    58 0000005A FF15[00000000]                  call [fprintf]
    59 00000060 83C40C                          add esp, 4*3
    60 00000063 FF35[04000000]                  push dword [f]
    61 00000069 FF15[00000000]                  call [fclose]
    62 0000006F 83C404                          add esp,4
    63 00000072 FF35[08000000]                  push dword [g]
    64 00000078 FF15[00000000]                  call [fclose]
    65 0000007E 83C404                          add esp, 4
    66                                          
    67                                          
    68                                          ; exit(0)
    69 00000081 6A00                            push    dword 0      ; push the parameter for exit onto the stack
    70 00000083 FF15[00000000]                  call    [exit]       ; call exit to terminate the program
