     1                                  bits 32 ; assembling for the 32 bits architecture
     2                                  
     3                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     4                                  global start        
     5                                  
     6                                  ; declare external functions needed by our program
     7                                  extern exit, fopen, fprintf, fclose               ; tell nasm that exit exists even if we won't be defining it
     8                                  import exit msvcrt.dll    ; exit is a function that ends the calling process. It is defined in msvcrt.dll
     9                                                            ; msvcrt.dll contains exit, printf and all the other important C-runtime specific functions
    10                                  import fopen msvcrt.dll
    11                                  import fprintf msvcrt.dll
    12                                  import fclose msvcrt.dll
    13                                  ; our data is declared here (the variables needed by our program)
    14                                  segment data use32 class=data
    15                                      ;A file name and a text (defined in the data segment) are given. The text contains lowercase letters, uppercase letters, digits and special characters. Replace all the special characters from the given text with
    16                                      ; ...
    17                                     ;text dw "Asta este % balta $",0
    18 00000000 646120206D65726765-        text dw "da  merge *acest %cod &", 0
    18 00000009 202A61636573742025-
    18 00000012 636F642026000000   
    19                                     ;text dw "da ", 0
    20                                     len equ $-text-3
    21 0000001A 0000<rept>                 write times len dw 0
    22 00000048 6F75747075742E7478-        filename db 'output.txt', 0
    22 00000051 7400               
    23 00000053 7700                       mode     db 'w', 0
    24 00000055 7300                       format   db 's', 0
    25                                  
    26                                  ; our code starts here
    27                                  segment code use32 class=code
    28                                      start:
    29                                          ; ...
    30 00000000 B158                            mov cl, 'X'
    31 00000002 31F6                            xor esi, esi
    32                                          read:
    33 00000004 8A86[00000000]                      mov al, [text + esi] ;moves every caracter in al
    34 0000000A 3C41                                cmp al, 'A'              
    35 0000000C 7202                                jb special               ;if it is smaller then 'A' it s clearly a special caracter and goes to special
    36 0000000E 730E                                jae verifyc              ;if it is greater or equal to 'A' verify if it is a capital letter or smth else
    37                                          
    38                                      special:                         ;if the code jumps here, then we write an X instead of the caracter
    39 00000010 888E[1A000000]                  mov [write + esi], cl        ;put the special caracter into the res 
    40 00000016 46                              inc esi
    41 00000017 83FE17                          cmp esi, len
    42 0000001A 72E8                            jb read
    43 0000001C 7320                            jae file
    44                                      verifyc:                        ;verify if it is capital letter else verify if it is small letter
    45 0000001E 3C5A                            cmp al, 'Z'
    46 00000020 760E                            jbe writel
    47 00000022 7700                            ja verifyl
    48                                      verifyl:                        ;verify if it is small letter
    49 00000024 3C61                            cmp al, 'a'
    50 00000026 72E8                            jb special
    51 00000028 7300                            jae verifyli
    52                                      
    53                                      verifyli:                       ;verify if it is small letter else write an x instead the special caracter
    54 0000002A 3C7A                            cmp al,'z'
    55 0000002C 7602                            jbe writel
    56 0000002E 77E0                            ja special
    57                                          
    58                                      writel:                         ;write letters
    59 00000030 8886[1A000000]                  mov [write + esi], al
    60 00000036 46                                  inc esi
    61 00000037 83FE17                              cmp esi, len
    62 0000003A 72C8                                jb read
    63 0000003C 7300                                jae file
    64                                       
    65                                      file:
    66 0000003E 68[53000000]                    push dword mode
    67 00000043 68[48000000]                    push dword filename
    68 00000048 FF15[00000000]                  call [fopen]
    69 0000004E 83C408                          add esp, 8      ;open
    70 00000051 89C3                            mov ebx, eax
    71                                  
    72 00000053 68[1A000000]                    push dword write
    73                                          ;push dword format
    74 00000058 53                              push ebx
    75 00000059 FF15[00000000]                  call [fprintf]
    76 0000005F 83C408                          add esp, 8      ;write
    77                                          
    78 00000062 53                              push ebx
    79 00000063 FF15[00000000]                  call [fclose]
    80 00000069 83C404                          add esp, 4      ;close
    81                                          ; exit(0)
    82 0000006C 6A00                            push    dword 0      ; push the parameter for exit onto the stack
    83 0000006E FF15[00000000]                  call    [exit]       ; call exit to terminate the program
