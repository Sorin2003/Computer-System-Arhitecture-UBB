     1                                  bits 32 ; assembling for the 32 bits architecture
     2                                  
     3                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     4                                  global start        
     5                                  
     6                                  ; declare external functions needed by our program
     7                                  extern exit               ; tell nasm that exit exists even if we won't be defining it
     8                                  import exit msvcrt.dll    ; exit is a function that ends the calling process. It is defined in msvcrt.dll
     9                                                            ; msvcrt.dll contains exit, printf and all the other important C-runtime specific functions
    10                                  
    11                                  ; our data is declared here (the variables needed by our program)
    12                                  segment data use32 class=data
    13                                      ;A file name and a text (defined in the data segment) are given. The text contains lowercase letters, uppercase letters, digits and special characters. Replace all the special characters from the given text with
    14                                      ; ...
    15 00000000 417374612065737465-        text dw "Asta este % balta $",0
    15 00000009 20252062616C746120-
    15 00000012 24000000           
    16                                     ;text dw "da  merge *acest %cod &", 0
    17                                     len equ $-text-3
    18 00000016 0000<rept>                 write times len dw 0
    19                                  
    20                                  ; our code starts here
    21                                  segment code use32 class=code
    22                                      start:
    23                                          ; ...
    24 00000000 83FE13                          cmp esi, len
    25 00000003 B158                            mov cl, 'X'
    26 00000005 31F6                            xor esi, esi
    27                                          read:
    28 00000007 8A86[00000000]                      mov al, [text + esi] ;moves every caracter in al
    29 0000000D 3C41                                cmp al, 'A'              
    30 0000000F 7202                                jb special               ;if it is smaller then 'A' it s clearly a special caracter and goes to special
    31 00000011 7312                                jae verifyc              ;if it is greater or equal to 'A' verify if it is a capital letter or smth else
    32                                          
    33                                      special:                         ;if the code jumps here, then we write an X instead of the caracter
    34 00000013 888E[16000000]                  mov [write + esi], cl       
    35 00000019 46                              inc esi
    36 0000001A 83FE13                          cmp esi, len
    37 0000001D 72E8                            jb read
    38 0000001F 0F83(00000000)                  jae exit
    39                                      verifyc:
    40 00000025 3C5A                            cmp al, 'Z'
    41 00000027 760E                            jbe writel
    42 00000029 7700                            ja verifyl
    43                                      verifyl:
    44 0000002B 3C61                            cmp al, 'a'
    45 0000002D 72E4                            jb special
    46 0000002F 7300                            jae verifyli
    47                                      
    48                                      verifyli:
    49 00000031 3C7A                            cmp al,'z'
    50 00000033 7602                            jbe writel
    51 00000035 77DC                            ja special
    52                                          
    53                                      writel:
    54 00000037 8886[16000000]                  mov [write + esi], al
    55 0000003D 46                                  inc esi
    56 0000003E 83FE13                              cmp esi, len
    57 00000041 72C4                                jb read
    58 00000043 0F83(00000000)                      jae exit
    59                                          ; exit(0)
    60 00000049 6A00                            push    dword 0      ; push the parameter for exit onto the stack
    61 0000004B FF15[00000000]                  call    [exit]       ; call exit to terminate the program
