     1                                  bits 32 ; assembling for the 32 bits architecture
     2                                  
     3                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     4                                  global start        
     5                                  
     6                                  ; declare external functions needed by our program
     7                                  extern exit               ; tell nasm that exit exists even if we won't be defining it
     8                                  extern printf
     9                                  extern scanf
    10                                  import exit msvcrt.dll    ; exit is a function that ends the calling process. It is defined in msvcrt.dll
    11                                                            ; msvcrt.dll contains exit, printf and all the other important C-runtime specific functions
    12                                  import printf msvcrt.dll
    13                                  import scanf msvcrt.dll
    14                                  
    15                                  ; our data is declared here (the variables needed by our program)
    16                                  segment data use32 class=data
    17                                      ; ...
    18                                      ;Read two numbers a and b (in base 10) from the keyboard and calculate a+b. Display the result in base 16
    19 00000000 00000000                    a dd  0       ; defining the variable a
    20 00000004 00000000                    b dd  0
    21 00000008 256400                  	format  db "%d", 0  ; definining the format
    22 0000000B 257800                      formath db "%x", 0  ; format hexa
    23                                  ; our code starts here
    24                                  segment code use32 class=code
    25                                      start:
    26                                          ; ...
    27 00000000 68[00000000]                    push dword a       ; pushing the parameters on the stack from right to left
    28 00000005 68[08000000]            		push dword format
    29 0000000A FF15[00000000]          		call [scanf]       ; calling the scanf function for reading
    30 00000010 83C408                  		add esp, 4 * 2     ; cleaning the parameters from the stack
    31 00000013 68[04000000]                    push dword b       ; pushing the parameters on the stack from right to left
    32 00000018 68[08000000]            		push dword format
    33 0000001D FF15[00000000]          		call [scanf]       ; calling the scanf function for reading
    34 00000023 83C408                  		add esp, 4 * 2     ; cleaning the parameters from the stack
    35 00000026 A1[00000000]                    mov eax, [a]
    36 0000002B 0305[04000000]                  add eax, [b]
    37 00000031 50                              push eax
    38 00000032 68[0B000000]            		push dword formath  
    39 00000037 FF15[00000000]          		call [printf]       ; calling the printf function
    40 0000003D 83C408                  		add esp, 4 * 2    ; cleaning the parameters from the stack
    41                                      
    42                                          ; exit(0)
    43 00000040 6A00                            push    dword 0      ; push the parameter for exit onto the stack
    44 00000042 FF15[00000000]                  call    [exit]       ; call exit to terminate the program
