     1                                  bits 32 ; assembling for the 32 bits architecture
     2                                  
     3                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     4                                  global start        
     5                                  
     6                                  ; declare external functions needed by our program
     7                                  extern exit               ; tell nasm that exit exists even if we won't be defining it
     8                                  import exit msvcrt.dll    ; exit is a function that ends the calling process. It is defined in msvcrt.dll
     9                                                            ; msvcrt.dll contains exit, printf and all the other important C-runtime specific functions
    10                                  
    11                                  ; our data is declared here (the variables needed by our program)
    12                                  segment data use32 class=data
    13                                      ;  a,b,c-byte; e-doubleword , i assumed that x is a qw like evrywhere else
    14                                      ;unsigned
    15 00000000 10                          a db 16
    16 00000001 12                          b db 18
    17 00000002 14                          c db 20
    18 00000003 59000000                    e dd 89
    19 00000007 C507000000000000            x dq 1989
    20                                  
    21                                  ; our code starts here
    22                                  segment code use32 class=code
    23                                      start:
    24                                          ; x-(a*b*25+c*3)/(a+b)+e;
    25 00000000 A0[00000000]                    mov al, byte[a]
    26 00000005 8A15[01000000]                  mov dl, byte[b]
    27 0000000B F6E2                            mul dl           ;ax <- al*dl = a*b
    28 0000000D 66BA1900                        mov dx, 25
    29 00000011 66F7E2                          mul dx           ;dx:ax <- ax*dx = a*b*25
    30 00000014 6652                            push dx
    31 00000016 6650                            push ax
    32 00000018 31C0                            xor eax,eax      ;eax = 0
    33 0000001A 58                              pop eax          ;eax <- dx:ax
    34 0000001B 89C3                            mov ebx,eax      ;ebx = eax = a*b*25
    35 0000001D 31C0                            xor eax, eax     ;eax = 0 so we can use it all later
    36 0000001F A0[02000000]                    mov al, byte[c]
    37 00000024 B203                            mov dl, 3
    38 00000026 F6E2                            mul dl         ;ax <- al*dl = c*3
    39 00000028 01C3                            add ebx, eax    ;ebx = a*b*25+c*3
    40 0000002A 89D9                            mov ecx, ebx    ;ecx = ebx =a*b*25+c*3
    41 0000002C 31C0                            xor eax, eax     ;eax = 0 so we can use it later
    42 0000002E A0[00000000]                    mov al, byte[a]
    43 00000033 0205[01000000]                  add al, byte[b] ;al = a+b
    44                                                          ;eax = a+b
    45 00000039 89C3                            mov ebx, eax    ;ebx = eax = a+b
    46 0000003B 89C8                            mov eax, ecx    ;eax = ecx = a*b*25+c*3
    47 0000003D 31D2                            xor edx,edx     ;edx = 0 so we can use it later for edx:eax <- eax
    48 0000003F F7F3                            div ebx        ;eax = (a*b*25+c*3)/(a+b)    edx = (a*b*25+c*3)%(a+b)
    49                                          ;I will not use the fractional part so I will only use eax
    50 00000041 31D2                            xor edx, edx    ;edx = 0 so i can use it later
    51                                                          ;edx:eax <- eax
    52 00000043 8B1D[07000000]                  mov ebx, dword[x+0]
    53 00000049 8B0D[0B000000]                  mov ecx, dword[x+4] ;ecx:ebx <- x
    54 0000004F 29C3                            sub ebx, eax
    55 00000051 29D1                            sub ecx,edx     ;ecx:ebx = ecx:ebx - edx:eax = x - edx:eax
    56 00000053 A1[03000000]                    mov eax, dword[e]
    57 00000058 31D2                            xor edx,edx     ;edx = 0 so i can use it later
    58 0000005A 01C3                            add ebx, eax
    59 0000005C 01D1                            add ecx, edx    ;ecx:ebx = ecx:ebx + edx:eax = ecx:ebx + e
    60 0000005E 89D8                            mov eax, ebx
    61 00000060 89CA                            mov edx, ecx    ;edx:eax = x-(a*b*25+c*3)/(a+b)+e
    62                                          
    63                                          
    64                                          
    65                                          
    66                                          
    67                                          
    68                                          
    69                                      
    70                                          ; exit(0)
    71 00000062 6A00                            push    dword 0      ; push the parameter for exit onto the stack
    72 00000064 FF15[00000000]                  call    [exit]       ; call exit to terminate the program
